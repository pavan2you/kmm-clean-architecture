/*
 * Copyright (C) 2021 The TagD Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'signing'
apply plugin: 'maven-publish'
apply from: "$rootDir/gradle/publish-properties.gradle"

tasks.register("sourceJar", Jar.class) {
    from(sourceSets.main.java.srcDirs)
    archiveClassifier.set("sources")
}

publishing {

    publications {

        if (!enableRemotePublish) {
            core(MavenPublication) {
                //create core publication
            }
        } else {
            if (enableNexusPublish) {
                mavenJava(MavenPublication) {
                    artifact("$buildDir/libs/${projectName}.jar")
                    task fixPom {
                        doLast {
                            File file = new File("$buildDir/publications/mavenJava/pom-default.xml")
                            def text = file.text

                            def firstIndexOfDependenciesEnd = text.indexOf("</dependencies>")
                            def filtered = text.substring(0, firstIndexOfDependenciesEnd + "</dependencies>".length()) + "\n</project>"
                            file.write(filtered)
                        }
                    }
                    generatePomFileForMavenJavaPublication.finalizedBy fixPom
                }
            }
            if (enableGithubPublish) {
                gpr(MavenPublication) {
                    task fixPom {
                        doLast {
                            File file = new File("$buildDir/publications/gpr/pom-default.xml")
                            def text = file.text

                            def firstIndexOfDependenciesEnd = text.indexOf("</dependencies>")
                            def filtered = text.substring(0, firstIndexOfDependenciesEnd + "</dependencies>".length()) + "\n</project>"
                            file.write(filtered)
                        }
                    }
                    generatePomFileForGprPublication.finalizedBy fixPom
                }
            }
        }

        it.withType(MavenPublication) {
            groupId artifactGroupId
            artifactId artifactIdName
            version = artifactVersionName

            from components.java

            artifact(sourceJar)

            pom {
                name = artifactIdName
                description = 'The technology agnostic kotlin\'s extensions'
                url = gitProjectUrl

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection = "scm:git:github.com/${gitProject}"
                    developerConnection = "scm:git:ssh://github.com/${gitProject}"
                    url = gitProjectUrl
                }
            }
        }
    }

    repositories {
        if (enableGithubPublish) {
            maven {
                name = "githubPackages"
                url = "https://maven.pkg.github.com/pavan2you/kmm-clean-architecture"
                credentials {
                    username = githubUser
                    password = githubToken
                }
            }
        }
        if (enableNexusPublish) {
            maven {
                name = "sonaMaven"

                def releaseUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

if (enableNexusPublish) {
    signing {
        sign publishing.publications
    }
}
