
/*
 * Copyright (C) 2021 The TagD Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id("maven-publish")
    id("signing")
}

// Read signing variables
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["githubUser"] = System.getenv('USER_GITHUB')
    ext["githubToken"] = System.getenv('TOKEN_GITHUB')
}

ext {
    enableRemotePublish = false
    enableGithubPublish = false
    enableNexusPublish = false

    artifactGroupId = "io.github.pavan2you"
    artifactVersionCode = 0
    artifactVersionName = "0.0.0-alpha1-snapshot"
    artifactIdName = "$project.name"
    artifactDescription = "Technology agnostic clean architecture"

    gitProjectPath = "pavan2you/kmm-clean-architecture"
    gitProject = "pavan2you/kmm-clean-architecture.git"
    gitRepoUrl = "https://github.com/pavan2you/kmm-clean-architecture"
    gitBranchUrl = "https://github.com/pavan2you/kmm-clean-architecture/tree/master"

    resolvedPath = ""
    tempProject = project
    while (tempProject != rootProject) {
        resolvedPath = ("/" + tempProject.getName()) + resolvedPath
        tempProject = tempProject.parent
    }
    gitProjectUrl = "${gitBranchUrl}${resolvedPath}"
}

publishing {

    repositories {
        if (enableGithubPublish) {
            maven {
                name = "githubPackages"
                url = "https://maven.pkg.github.com/pavan2you/kmm-clean-architecture"
                credentials {
                    username = githubUser
                    password = githubToken
                }
            }
        }
        if (enableNexusPublish) {
            maven {
                name = "sonaMaven"

                def releaseUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

if (enableNexusPublish) {
    signing {
        sign publishing.publications
    }
}